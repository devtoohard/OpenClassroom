query findFaculty($faculty_id: String) {
  faculty(where: { id: { _eq: $faculty_id } }) {
    email
    id
    name
  }
}

query getCourseList {
  course(order_by: { title: asc }) {
    title
    module_code
  }
}

query getFacultyList {
  faculty(order_by: { name: asc }) {
    id
    name
  }
}

query getFacultyById($faculty_id: String!) {
  faculty_by_pk(id: $faculty_id) {
    email
    id
    name
  }
}

query getTagsList {
  tag {
    label
  }
}

mutation update_visit_response(
  $visit_id: Int!
  $visit_status: String!
  $time_responded: timestamptz!
  $response_msg: String
) {
  update_visit_by_pk(
    pk_columns: { id: $visit_id }
    _set: {
      time_responded: $time_responded
      visit_status: $visit_status
      response_msg: $response_msg
    }
  ) {
    time_responded
    visit_status
    response_msg
  }
}

query get_seminars_with_visits_by_time_requested(
  $faculty_id: String
  $semester_code: String
) {
  seminar(
    where: {
      course_group: { faculty_id: { _eq: $faculty_id } }
      _and: { semester_code: { _eq: $semester_code } }
    }
  ) {
    title
    start
    module_code
    location_code
    location {
      full_name
    }
    date
    desc
    end
    id
    is_open
    semester_code
    group_code
    visitor_capacity
    week
    visits(order_by: { time_requested: desc }) {
      id
      is_archived
      is_cancelled
      request_msg
      response_msg
      time_requested
      time_responded
      visit_status
      visitor_id
      visitor {
        email
        id
        name
        is_active
      }
    }
    course_group {
      id
      notes
      course {
        id
        title
      }
    }
  }
}

query get_my_visits($visitor_id: String!) {
  visit(where: {visitor_id: {_eq: $visitor_id}}) {
    id
    seminar_id
    visit_status
    visitor_id
    request_msg
    response_msg
    time_requested
    time_responded
    seminar {
      id
      module_code
      date
      start
      end
      is_open
      location {
        full_name
      }
      title
      desc
      course_group {
        id
        notes
        faculty {
          id
          name
        }
        course {
          id
          module_code
          title
          desc
          module_brief_link
        }
      }
    }
  }
}


mutation delete_visit($visit_id: Int!) {
  delete_visit(where: { id: { _eq: $visit_id } }) {
    affected_rows
  }
}

query get_course_groups_by_faculty($faculty_id: String!) {
  course_group(where: { faculty_id: { _eq: $faculty_id } }) {
    id
    group_code
    course {
      id
      title
      module_code
    }
  }
}

query get_seminars_by_course_group($course_group_id: Int!) {
  seminar(where: { course_group: { id: { _eq: $course_group_id } } }, order_by: {date: desc}) {
    id
    date
    start
    end
    is_archived
    location {
      full_name
    }
    title
    desc
    visitor_capacity
    is_open
  }
}

query get_course_by_course_group($course_group_id: Int!) {
  course(where: { course_groups: { id: { _eq: $course_group_id } } }) {
    id
    module_code
    title
    desc
  }
}

mutation archive_seminar($seminar_id: Int!) {
  update_seminar(
    where: { id: { _eq: $seminar_id } }
    _set: { is_archived: true }
  ) {
    affected_rows
  }
}

mutation unarchive_seminar($seminar_id: Int!) {
  update_seminar(
    where: { id: { _eq: $seminar_id } }
    _set: { is_archived: false }
  ) {
    affected_rows
  }
}

query searchSeminarsByFilters(
  $course_title: String!
  $faculty_name: String!
  $start_date: date!
  $end_date: date!
  $start_time: time!
  $end_time: time!
  $visitor_id: String
) {
  seminar(
    where: {
      _and: [
        { course_group: { course: { title: { _similar: $course_title } } } }
        { course_group: { faculty: { name: { _similar: $faculty_name } } } }
        { date: { _gte: $start_date } }
        { date: { _lte: $end_date } }
        { start: { _gte: $start_time } }
        { end: { _lte: $end_time } }
      ]
    }
  ) {
    date
    start
    end
    id
    is_open
    module_code
    group_code
    semester_code
    location {
      code
      full_name
    }
    course_group {
      id
      faculty {
        name
      }
      course {
        id
        title
      }
    }
    visits(where: {visitor_id: {_eq: $visitor_id}}) {
      id
      visit_status
      request_msg
      response_msg
      time_requested
      time_responded
    }
  }
}

query searchSeminarsByFiltersWithTags(
  $course_title: String!
  $faculty_name: String!
  $start_date: date!
  $end_date: date!
  $start_time: time!
  $end_time: time!
  $selected_tags: [String!]
  $visitor_id: String
) {
  seminar(
    where: {
      _and: [
        { course_group: { course: { title: { _similar: $course_title } } } }
        { course_group: { faculty: { name: { _similar: $faculty_name } } } }
        { date: { _gte: $start_date } }
        { date: { _lte: $end_date } }
        { start: { _gte: $start_time } }
        { end: { _lte: $end_time } }
        {
          course_group: {
            course: { tagged_as: { tag_label: { _in: $selected_tags } } }
          }
        }
      ]
    }
  ) {
    date
    start
    end
    id
    is_open
    module_code
    group_code
    semester_code
    location {
      code
      full_name
    }
    course_group {
      id
      faculty {
        id
        name
      }
      course {
        id
        title
      }
    }
    visits(where: {visitor_id: {_eq: $visitor_id}}) {
      id
      visit_status
      request_msg
      response_msg
      time_requested
      time_responded
    }
  }
}

mutation request_visit($seminar_id: Int!, $visitor_id: String!, $request_msg: String ) {
  insert_visit(objects: [{ seminar_id: $seminar_id, visitor_id: $visitor_id, visit_status: "PENDING", request_msg: $request_msg }]) {
    returning {
      seminar_id
      id
      visit_status
      request_msg
      response_msg
      time_requested
      time_responded
    }
  }
}

mutation edit_capacity($id: Int!, $visitor_capacity: Int!) {
  update_seminar(
   where:  { id: { _eq: $id } } 
    _set: { visitor_capacity: $visitor_capacity }
  ) {
    affected_rows
  }
}


mutation close_all_course_seminars($course_group_id: Int!) {
  update_seminar(where: {course_group: {id: {_eq: $course_group_id}}}, _set: {is_open: false}) {
    affected_rows
  }
}

